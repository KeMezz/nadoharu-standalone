// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  login_id   String       @unique
  password   String?
  username   String
  bio        String?
  email      String?      @unique
  github_id  String?      @unique
  avatar     String?      @unique
  is_deleted Boolean      @default(false)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  tokens     Token[]
  posts      Post[]
  reposts    Repost[]
  comments   Comment[]
  friends    Friendship[] @relation("FriendsAsInitiator")
  friendOf   Friendship[] @relation("FriendsAsRecipient")
}

model Friendship {
  id          Int      @id @default(autoincrement())
  status      Int      @default(2) // 0: rejected, 1: accepted, 2: pending
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  text        String?
  initiator   User     @relation("FriendsAsInitiator", fields: [initiatorId], references: [id])
  initiatorId Int
  recipient   User     @relation("FriendsAsRecipient", fields: [recipientId], references: [id])
  recipientId Int

  @@unique([initiatorId, recipientId])
}

model Token {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Post {
  id         Int       @id @default(autoincrement())
  content    String
  tags       String?
  views      Int       @default(0)
  is_deleted Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  reposts    Repost[]
  comments   Comment[]
}

model Repost {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int

  @@unique([userId, postId])
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
}
